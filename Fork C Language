#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define MAX_CHILD 5
#define MAX_BUFFER_LENGTH 256

int num_child = 0;
int child_pids[MAX_CHILD];                                         //Array pipe to communicate each child process

                                                                   // Signal handler for interrupt
void interrupt_handler(int sig) {
    printf("\nProcess was intterupt, Exiting...\n");
    for (int i = 0; i < num_child; i++) {
        kill(child_pids[i], SIGTERM);                              // Terminate child process
    }
    exit(0);
}

int main() {
    int fds[2];                                                   //Pipe file descriptors
    if (pipe(fds) == -1) {
        perror("Pipe file creation was intterupt,Exiting");
        exit(1);
    }

    signal(SIGINT, interrupt_handler);                             //Register signal handler incase intterupt process

    while (1) {
        char message[MAX_BUFFER_LENGTH];
        printf("Enter a message for child process (or type 'out' to quit): ");
        fgets(message, MAX_BUFFER_LENGTH, stdin);

        if (strcmp(message, "out\n") == 0) {                      // Process will be exit if "out" is entered
            printf("Exiting...\n");
            break;
        }

        pid_t pid = fork();                                       //Fork child process
        if (pid == -1) {
            perror("Fork process failed");
            exit(1);

        } else if (pid == 0) {
                                                                  // Child process
            close(fds[1]);                                        // Close write end of the pipe
            char message_received[MAX_BUFFER_LENGTH];
            read(fds[0], message_received, sizeof(message_received));
            printf("Child process (PID: %d) received message: %s", getpid(), message_received);
            close(fds[0]);                                      // Close read end of the pipe
            exit(0);
        } else {
                                                                  // Parent process
            close(fds[0]);                                       // Close read end of the pipe
            write(fds[1], message, strlen(message) + 1);
            close(fds[1]);                                       // Close write end of the pipe
            child_pids[num_child++] = pid;
        }
    }

    return 0;
}
